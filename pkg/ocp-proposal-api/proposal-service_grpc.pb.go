// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_proposal_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpProposalApiClient is the client API for OcpProposalApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpProposalApiClient interface {
	CreateProposalV1(ctx context.Context, in *CreateProposalV1Request, opts ...grpc.CallOption) (*CreateProposalV1Response, error)
	CreateMultiProposalV1(ctx context.Context, in *CreateMultiProposalV1Request, opts ...grpc.CallOption) (*CreateMultiProposalV1Response, error)
	RemoveProposalV1(ctx context.Context, in *RemoveProposalV1Request, opts ...grpc.CallOption) (*RemoveProposalV1Response, error)
	DescribeProposalV1(ctx context.Context, in *DescribeProposalV1Request, opts ...grpc.CallOption) (*DescribeProposalV1Response, error)
	UpdateProposalV1(ctx context.Context, in *UpdateProposalV1Request, opts ...grpc.CallOption) (*UpdateProposalV1Response, error)
	ListProposalsV1(ctx context.Context, in *ListProposalsV1Request, opts ...grpc.CallOption) (*ListProposalsV1Response, error)
}

type ocpProposalApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpProposalApiClient(cc grpc.ClientConnInterface) OcpProposalApiClient {
	return &ocpProposalApiClient{cc}
}

func (c *ocpProposalApiClient) CreateProposalV1(ctx context.Context, in *CreateProposalV1Request, opts ...grpc.CallOption) (*CreateProposalV1Response, error) {
	out := new(CreateProposalV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/CreateProposalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProposalApiClient) CreateMultiProposalV1(ctx context.Context, in *CreateMultiProposalV1Request, opts ...grpc.CallOption) (*CreateMultiProposalV1Response, error) {
	out := new(CreateMultiProposalV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/CreateMultiProposalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProposalApiClient) RemoveProposalV1(ctx context.Context, in *RemoveProposalV1Request, opts ...grpc.CallOption) (*RemoveProposalV1Response, error) {
	out := new(RemoveProposalV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/RemoveProposalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProposalApiClient) DescribeProposalV1(ctx context.Context, in *DescribeProposalV1Request, opts ...grpc.CallOption) (*DescribeProposalV1Response, error) {
	out := new(DescribeProposalV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/DescribeProposalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProposalApiClient) UpdateProposalV1(ctx context.Context, in *UpdateProposalV1Request, opts ...grpc.CallOption) (*UpdateProposalV1Response, error) {
	out := new(UpdateProposalV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/UpdateProposalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProposalApiClient) ListProposalsV1(ctx context.Context, in *ListProposalsV1Request, opts ...grpc.CallOption) (*ListProposalsV1Response, error) {
	out := new(ListProposalsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.proposal.api.OcpProposalApi/ListProposalsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpProposalApiServer is the server API for OcpProposalApi service.
// All implementations must embed UnimplementedOcpProposalApiServer
// for forward compatibility
type OcpProposalApiServer interface {
	CreateProposalV1(context.Context, *CreateProposalV1Request) (*CreateProposalV1Response, error)
	CreateMultiProposalV1(context.Context, *CreateMultiProposalV1Request) (*CreateMultiProposalV1Response, error)
	RemoveProposalV1(context.Context, *RemoveProposalV1Request) (*RemoveProposalV1Response, error)
	DescribeProposalV1(context.Context, *DescribeProposalV1Request) (*DescribeProposalV1Response, error)
	UpdateProposalV1(context.Context, *UpdateProposalV1Request) (*UpdateProposalV1Response, error)
	ListProposalsV1(context.Context, *ListProposalsV1Request) (*ListProposalsV1Response, error)
	mustEmbedUnimplementedOcpProposalApiServer()
}

// UnimplementedOcpProposalApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpProposalApiServer struct {
}

func (UnimplementedOcpProposalApiServer) CreateProposalV1(context.Context, *CreateProposalV1Request) (*CreateProposalV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProposalV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) CreateMultiProposalV1(context.Context, *CreateMultiProposalV1Request) (*CreateMultiProposalV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiProposalV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) RemoveProposalV1(context.Context, *RemoveProposalV1Request) (*RemoveProposalV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProposalV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) DescribeProposalV1(context.Context, *DescribeProposalV1Request) (*DescribeProposalV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProposalV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) UpdateProposalV1(context.Context, *UpdateProposalV1Request) (*UpdateProposalV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProposalV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) ListProposalsV1(context.Context, *ListProposalsV1Request) (*ListProposalsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposalsV1 not implemented")
}
func (UnimplementedOcpProposalApiServer) mustEmbedUnimplementedOcpProposalApiServer() {}

// UnsafeOcpProposalApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpProposalApiServer will
// result in compilation errors.
type UnsafeOcpProposalApiServer interface {
	mustEmbedUnimplementedOcpProposalApiServer()
}

func RegisterOcpProposalApiServer(s grpc.ServiceRegistrar, srv OcpProposalApiServer) {
	s.RegisterService(&OcpProposalApi_ServiceDesc, srv)
}

func _OcpProposalApi_CreateProposalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProposalV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).CreateProposalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/CreateProposalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).CreateProposalV1(ctx, req.(*CreateProposalV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProposalApi_CreateMultiProposalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiProposalV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).CreateMultiProposalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/CreateMultiProposalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).CreateMultiProposalV1(ctx, req.(*CreateMultiProposalV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProposalApi_RemoveProposalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProposalV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).RemoveProposalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/RemoveProposalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).RemoveProposalV1(ctx, req.(*RemoveProposalV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProposalApi_DescribeProposalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProposalV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).DescribeProposalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/DescribeProposalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).DescribeProposalV1(ctx, req.(*DescribeProposalV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProposalApi_UpdateProposalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProposalV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).UpdateProposalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/UpdateProposalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).UpdateProposalV1(ctx, req.(*UpdateProposalV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProposalApi_ListProposalsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProposalApiServer).ListProposalsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.proposal.api.OcpProposalApi/ListProposalsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProposalApiServer).ListProposalsV1(ctx, req.(*ListProposalsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpProposalApi_ServiceDesc is the grpc.ServiceDesc for OcpProposalApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpProposalApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.proposal.api.OcpProposalApi",
	HandlerType: (*OcpProposalApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProposalV1",
			Handler:    _OcpProposalApi_CreateProposalV1_Handler,
		},
		{
			MethodName: "CreateMultiProposalV1",
			Handler:    _OcpProposalApi_CreateMultiProposalV1_Handler,
		},
		{
			MethodName: "RemoveProposalV1",
			Handler:    _OcpProposalApi_RemoveProposalV1_Handler,
		},
		{
			MethodName: "DescribeProposalV1",
			Handler:    _OcpProposalApi_DescribeProposalV1_Handler,
		},
		{
			MethodName: "UpdateProposalV1",
			Handler:    _OcpProposalApi_UpdateProposalV1_Handler,
		},
		{
			MethodName: "ListProposalsV1",
			Handler:    _OcpProposalApi_ListProposalsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proposal-service.proto",
}
