// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-feedback-api/internal/repo (interfaces: BatchAdder)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-feedback-api/internal/models"
)

// MockBatchAdder is a mock of BatchAdder interface.
type MockBatchAdder struct {
	ctrl     *gomock.Controller
	recorder *MockBatchAdderMockRecorder
}

// MockBatchAdderMockRecorder is the mock recorder for MockBatchAdder.
type MockBatchAdderMockRecorder struct {
	mock *MockBatchAdder
}

// NewMockBatchAdder creates a new mock instance.
func NewMockBatchAdder(ctrl *gomock.Controller) *MockBatchAdder {
	mock := &MockBatchAdder{ctrl: ctrl}
	mock.recorder = &MockBatchAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchAdder) EXPECT() *MockBatchAdderMockRecorder {
	return m.recorder
}

// AddEntities mocks base method.
func (m *MockBatchAdder) AddEntities(arg0 context.Context, arg1 ...models.Entity) ([]uint64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEntities", varargs...)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEntities indicates an expected call of AddEntities.
func (mr *MockBatchAdderMockRecorder) AddEntities(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntities", reflect.TypeOf((*MockBatchAdder)(nil).AddEntities), varargs...)
}
