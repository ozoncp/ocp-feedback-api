// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_feedback_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpFeedbackApiClient is the client API for OcpFeedbackApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpFeedbackApiClient interface {
	CreateFeedbackV1(ctx context.Context, in *CreateFeedbackV1Request, opts ...grpc.CallOption) (*CreateFeedbackV1Response, error)
	CreateMultiFeedbackV1(ctx context.Context, in *CreateMultiFeedbackV1Request, opts ...grpc.CallOption) (*CreateMultiFeedbackV1Response, error)
	RemoveFeedbackV1(ctx context.Context, in *RemoveFeedbackV1Request, opts ...grpc.CallOption) (*RemoveFeedbackV1Response, error)
	DescribeFeedbackV1(ctx context.Context, in *DescribeFeedbackV1Request, opts ...grpc.CallOption) (*DescribeFeedbackV1Response, error)
	UpdateFeedbackV1(ctx context.Context, in *UpdateFeedbackV1Request, opts ...grpc.CallOption) (*UpdateFeedbackV1Response, error)
	ListFeedbacksV1(ctx context.Context, in *ListFeedbacksV1Request, opts ...grpc.CallOption) (*ListFeedbacksV1Response, error)
}

type ocpFeedbackApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpFeedbackApiClient(cc grpc.ClientConnInterface) OcpFeedbackApiClient {
	return &ocpFeedbackApiClient{cc}
}

func (c *ocpFeedbackApiClient) CreateFeedbackV1(ctx context.Context, in *CreateFeedbackV1Request, opts ...grpc.CallOption) (*CreateFeedbackV1Response, error) {
	out := new(CreateFeedbackV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/CreateFeedbackV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpFeedbackApiClient) CreateMultiFeedbackV1(ctx context.Context, in *CreateMultiFeedbackV1Request, opts ...grpc.CallOption) (*CreateMultiFeedbackV1Response, error) {
	out := new(CreateMultiFeedbackV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/CreateMultiFeedbackV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpFeedbackApiClient) RemoveFeedbackV1(ctx context.Context, in *RemoveFeedbackV1Request, opts ...grpc.CallOption) (*RemoveFeedbackV1Response, error) {
	out := new(RemoveFeedbackV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/RemoveFeedbackV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpFeedbackApiClient) DescribeFeedbackV1(ctx context.Context, in *DescribeFeedbackV1Request, opts ...grpc.CallOption) (*DescribeFeedbackV1Response, error) {
	out := new(DescribeFeedbackV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/DescribeFeedbackV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpFeedbackApiClient) UpdateFeedbackV1(ctx context.Context, in *UpdateFeedbackV1Request, opts ...grpc.CallOption) (*UpdateFeedbackV1Response, error) {
	out := new(UpdateFeedbackV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/UpdateFeedbackV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpFeedbackApiClient) ListFeedbacksV1(ctx context.Context, in *ListFeedbacksV1Request, opts ...grpc.CallOption) (*ListFeedbacksV1Response, error) {
	out := new(ListFeedbacksV1Response)
	err := c.cc.Invoke(ctx, "/ocp.feedback.api.OcpFeedbackApi/ListFeedbacksV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpFeedbackApiServer is the server API for OcpFeedbackApi service.
// All implementations must embed UnimplementedOcpFeedbackApiServer
// for forward compatibility
type OcpFeedbackApiServer interface {
	CreateFeedbackV1(context.Context, *CreateFeedbackV1Request) (*CreateFeedbackV1Response, error)
	CreateMultiFeedbackV1(context.Context, *CreateMultiFeedbackV1Request) (*CreateMultiFeedbackV1Response, error)
	RemoveFeedbackV1(context.Context, *RemoveFeedbackV1Request) (*RemoveFeedbackV1Response, error)
	DescribeFeedbackV1(context.Context, *DescribeFeedbackV1Request) (*DescribeFeedbackV1Response, error)
	UpdateFeedbackV1(context.Context, *UpdateFeedbackV1Request) (*UpdateFeedbackV1Response, error)
	ListFeedbacksV1(context.Context, *ListFeedbacksV1Request) (*ListFeedbacksV1Response, error)
	mustEmbedUnimplementedOcpFeedbackApiServer()
}

// UnimplementedOcpFeedbackApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpFeedbackApiServer struct {
}

func (UnimplementedOcpFeedbackApiServer) CreateFeedbackV1(context.Context, *CreateFeedbackV1Request) (*CreateFeedbackV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedbackV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) CreateMultiFeedbackV1(context.Context, *CreateMultiFeedbackV1Request) (*CreateMultiFeedbackV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiFeedbackV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) RemoveFeedbackV1(context.Context, *RemoveFeedbackV1Request) (*RemoveFeedbackV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeedbackV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) DescribeFeedbackV1(context.Context, *DescribeFeedbackV1Request) (*DescribeFeedbackV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFeedbackV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) UpdateFeedbackV1(context.Context, *UpdateFeedbackV1Request) (*UpdateFeedbackV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedbackV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) ListFeedbacksV1(context.Context, *ListFeedbacksV1Request) (*ListFeedbacksV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedbacksV1 not implemented")
}
func (UnimplementedOcpFeedbackApiServer) mustEmbedUnimplementedOcpFeedbackApiServer() {}

// UnsafeOcpFeedbackApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpFeedbackApiServer will
// result in compilation errors.
type UnsafeOcpFeedbackApiServer interface {
	mustEmbedUnimplementedOcpFeedbackApiServer()
}

func RegisterOcpFeedbackApiServer(s grpc.ServiceRegistrar, srv OcpFeedbackApiServer) {
	s.RegisterService(&OcpFeedbackApi_ServiceDesc, srv)
}

func _OcpFeedbackApi_CreateFeedbackV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedbackV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).CreateFeedbackV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/CreateFeedbackV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).CreateFeedbackV1(ctx, req.(*CreateFeedbackV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpFeedbackApi_CreateMultiFeedbackV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiFeedbackV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).CreateMultiFeedbackV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/CreateMultiFeedbackV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).CreateMultiFeedbackV1(ctx, req.(*CreateMultiFeedbackV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpFeedbackApi_RemoveFeedbackV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeedbackV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).RemoveFeedbackV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/RemoveFeedbackV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).RemoveFeedbackV1(ctx, req.(*RemoveFeedbackV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpFeedbackApi_DescribeFeedbackV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFeedbackV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).DescribeFeedbackV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/DescribeFeedbackV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).DescribeFeedbackV1(ctx, req.(*DescribeFeedbackV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpFeedbackApi_UpdateFeedbackV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedbackV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).UpdateFeedbackV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/UpdateFeedbackV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).UpdateFeedbackV1(ctx, req.(*UpdateFeedbackV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpFeedbackApi_ListFeedbacksV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedbacksV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpFeedbackApiServer).ListFeedbacksV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.feedback.api.OcpFeedbackApi/ListFeedbacksV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpFeedbackApiServer).ListFeedbacksV1(ctx, req.(*ListFeedbacksV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpFeedbackApi_ServiceDesc is the grpc.ServiceDesc for OcpFeedbackApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpFeedbackApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.feedback.api.OcpFeedbackApi",
	HandlerType: (*OcpFeedbackApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeedbackV1",
			Handler:    _OcpFeedbackApi_CreateFeedbackV1_Handler,
		},
		{
			MethodName: "CreateMultiFeedbackV1",
			Handler:    _OcpFeedbackApi_CreateMultiFeedbackV1_Handler,
		},
		{
			MethodName: "RemoveFeedbackV1",
			Handler:    _OcpFeedbackApi_RemoveFeedbackV1_Handler,
		},
		{
			MethodName: "DescribeFeedbackV1",
			Handler:    _OcpFeedbackApi_DescribeFeedbackV1_Handler,
		},
		{
			MethodName: "UpdateFeedbackV1",
			Handler:    _OcpFeedbackApi_UpdateFeedbackV1_Handler,
		},
		{
			MethodName: "ListFeedbacksV1",
			Handler:    _OcpFeedbackApi_ListFeedbacksV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feedback-service.proto",
}
